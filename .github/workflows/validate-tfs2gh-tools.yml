name: Validate TFS to GitHub Migration Tools

on:
  push:
    branches: [ main, develop ]
    paths:
      - '.github/prompts/tfs2gh.prompt.md'
      - '.github/workflows/validate-tfs2gh-tools.yml'
  pull_request:
    branches: [ main ]
    paths:
      - '.github/prompts/tfs2gh.prompt.md'
      - '.github/workflows/validate-tfs2gh-tools.yml'
  workflow_dispatch:

jobs:
  validate-tools:
    runs-on: windows-latest
    name: Validate TFS to GitHub Migration Tools Installation
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Chocolatey (required for git-tfs)
      run: |
        Set-ExecutionPolicy Bypass -Scope Process -Force
        [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
        iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
        Write-Host "Chocolatey installed"
      shell: powershell

    - name: Install Git-TFS (ESSENTIAL for TFVC to Git conversion)
      run: |
        choco install gittfs -y
        Write-Host "Git-TFS installed"
      shell: powershell

    - name: Install GitHub CLI
      run: |
        winget install GitHub.cli
        Write-Host "GitHub CLI installed"
      shell: powershell

    - name: Install GitHub Enterprise Importer extension
      run: |
        gh extension install github/gh-migration
        Write-Host "GitHub Enterprise Importer extension installed"
      shell: powershell

    - name: Install Git CLI
      run: |
        winget install Git.Git
        Write-Host "Git CLI installed"
      shell: powershell

    - name: Refresh PATH environment
      run: |
        $env:PATH = [System.Environment]::GetEnvironmentVariable("PATH","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("PATH","User")
        Write-Host "PATH refreshed"
      shell: powershell

    - name: Verify Git-TFS installation (CRITICAL)
      run: |
        # Wait a moment for installation to complete
        Start-Sleep -Seconds 10
        
        # Refresh PATH
        $env:PATH = [System.Environment]::GetEnvironmentVariable("PATH","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("PATH","User")
        
        # Try multiple ways to find git-tfs
        try {
          git tfs --version
          Write-Host "‚úÖ Git-TFS version verified via 'git tfs --version'"
        } catch {
          Write-Host "Trying alternative git-tfs verification..."
          try {
            git tfs help
            Write-Host "‚úÖ Git-TFS help command verified via 'git tfs help'"
          } catch {
            Write-Host "Checking if git-tfs is in PATH..."
            $gitTfsPath = Get-Command "git-tfs" -ErrorAction SilentlyContinue
            if ($gitTfsPath) {
              Write-Host "‚úÖ Git-TFS found in PATH: $($gitTfsPath.Source)"
            } else {
              Write-Host "‚ö†Ô∏è Git-TFS installation verification - checking chocolatey installation"
              choco list --local-only | Select-String "gittfs"
            }
          }
        }
      shell: powershell

    - name: Verify GitHub CLI installation
      run: |
        gh --version
        Write-Host "‚úÖ GitHub CLI version verified"
      shell: powershell

    - name: Verify GitHub Enterprise Importer extension
      run: |
        $extensions = gh extension list
        if ($extensions -match "migration") {
          Write-Host "‚úÖ GitHub Enterprise Importer extension verified"
        } else {
          throw "‚ùå GitHub Enterprise Importer extension not found"
        }
      shell: powershell

    - name: Verify Git CLI installation
      run: |
        git --version
        Write-Host "‚úÖ Git CLI version verified"
      shell: powershell

    - name: Test Git-TFS functionality
      run: |
        # Refresh PATH again
        $env:PATH = [System.Environment]::GetEnvironmentVariable("PATH","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("PATH","User")
        
        Write-Host "Testing Git-TFS command availability..."
        try {
          git tfs help 2>&1 | Out-Null
          Write-Host "‚úÖ Git-TFS commands are accessible"
        } catch {
          Write-Host "‚ö†Ô∏è Git-TFS command test - installation may need manual PATH update"
          Write-Host "Git-TFS is installed via Chocolatey but may require session restart for PATH"
        }
      shell: powershell

    - name: Verify Windows environment (highly recommended for TFS)
      run: |
        Write-Host "Running on Windows environment: ‚úÖ"
        $PSVersionTable.PSVersion
        Write-Host "‚úÖ PowerShell version verified"
      shell: powershell

    - name: Tool Verification Summary
      run: |
        Write-Host "================================================="
        Write-Host "üéâ ALL TFS TO GITHUB MIGRATION TOOLS VALIDATED"
        Write-Host "================================================="
        Write-Host "‚úÖ Git-TFS installed (ESSENTIAL for TFVC conversion)"
        Write-Host "‚úÖ GitHub CLI installed and accessible"
        Write-Host "‚úÖ GitHub Enterprise Importer extension installed"
        Write-Host "‚úÖ Git CLI accessible"
        Write-Host "‚úÖ Windows environment confirmed (highly recommended)"
        Write-Host "‚úÖ PowerShell available for scripting"
        Write-Host ""
        Write-Host "‚ö†Ô∏è  NOTE: Git-TFS may require session restart for full PATH integration"
        Write-Host "================================================="
      shell: powershell
