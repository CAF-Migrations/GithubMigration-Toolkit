name: Validate SVN to GitHub Migration Tools

on:
  push:
    branches: [ main, develop ]
    paths:
      - '.github/prompts/svn2gh.prompt.md'
      - '.github/workflows/validate-svn2gh-tools.yml'
  pull_request:
    branches: [ main ]
    paths:
      - '.github/prompts/svn2gh.prompt.md'
      - '.github/workflows/validate-svn2gh-tools.yml'
  workflow_dispatch:

jobs:
  validate-tools:
    runs-on: windows-latest
    name: Validate SVN to GitHub Migration Tools Installation
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Chocolatey
      run: |
        Set-ExecutionPolicy Bypass -Scope Process -Force
        [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
        iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
        Write-Host "Chocolatey installed"
      shell: powershell

    - name: Install Git for Windows (includes git-svn)
      run: |
        # Git is pre-installed on GitHub-hosted runners
        git --version
        Write-Host "Git for Windows is available (includes git-svn)"
      shell: powershell

    - name: Install Subversion client
      run: |
        choco install svn -y
        Write-Host "Subversion command line client installed"
      shell: powershell

    - name: Install GitHub CLI
      run: |
        # GitHub CLI is pre-installed on GitHub-hosted runners
        gh --version
        Write-Host "GitHub CLI is available"
      shell: powershell

    - name: Install Strawberry Perl
      run: |
        choco install strawberryperl -y
        Write-Host "Strawberry Perl installed"
      shell: powershell

    - name: Refresh PATH environment
      run: |
        $env:PATH = [System.Environment]::GetEnvironmentVariable("PATH","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("PATH","User")
        Write-Host "PATH environment refreshed"
      shell: powershell

    - name: Verify Git with SVN support
      run: |
        # Wait for installations to complete
        Start-Sleep -Seconds 10
        
        # Refresh PATH
        $env:PATH = [System.Environment]::GetEnvironmentVariable("PATH","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("PATH","User")
        
        git --version
        Write-Host "‚úÖ Git version verified"
        
        try {
          git svn --version
          Write-Host "‚úÖ Git-SVN support verified"
        } catch {
          Write-Host "‚ö†Ô∏è Git-SVN verification - checking if available with full path"
          # Git-SVN might need the full Git installation to be recognized
          $gitPath = (Get-Command git).Source
          $gitDir = Split-Path $gitPath
          & "$gitDir\git.exe" svn --version
        }
      shell: powershell

    - name: Verify Subversion client
      run: |
        # Refresh PATH to include TortoiseSVN bin directory
        $env:PATH = [System.Environment]::GetEnvironmentVariable("PATH","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("PATH","User")
        
        try {
          svn --version
          Write-Host "‚úÖ Subversion client version verified"
        } catch {
          Write-Host "‚ö†Ô∏è SVN client verification - checking TortoiseSVN installation"
          # TortoiseSVN bin directory might not be in PATH immediately
          $tortoisePath = "${env:ProgramFiles}\TortoiseSVN\bin"
          if (Test-Path "$tortoisePath\svn.exe") {
            Write-Host "‚úÖ Subversion client found at: $tortoisePath\svn.exe"
            & "$tortoisePath\svn.exe" --version
          } else {
            Write-Host "Checking alternative TortoiseSVN locations..."
            Get-ChildItem -Path "${env:ProgramFiles}" -Name "*Tortoise*" -Directory -ErrorAction SilentlyContinue
          }
        }
      shell: powershell

    - name: Verify GitHub CLI
      run: |
        gh --version
        Write-Host "‚úÖ GitHub CLI version verified"
      shell: powershell

    - name: Verify Perl interpreter
      run: |
        # Refresh PATH
        $env:PATH = [System.Environment]::GetEnvironmentVariable("PATH","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("PATH","User")
        
        try {
          perl --version
          Write-Host "‚úÖ Perl interpreter version verified"
        } catch {
          Write-Host "‚ö†Ô∏è Perl verification - checking Strawberry Perl installation"
          $perlPath = "${env:ProgramFiles}\Strawberry\perl\bin"
          if (Test-Path "$perlPath\perl.exe") {
            Write-Host "‚úÖ Perl found at: $perlPath\perl.exe"
            & "$perlPath\perl.exe" --version
          }
        }
      shell: powershell

    - name: Verify text processing tools
      run: |
        Write-Host "Verifying text processing tools availability..."
        
        # Check if basic text tools are available (some come with Git for Windows)
        try {
          where.exe awk 2>$null
          Write-Host "‚úÖ awk available"
        } catch {
          Write-Host "‚ö†Ô∏è awk not found in PATH (may be available in Git Bash)"
        }
        
        try {
          where.exe sed 2>$null
          Write-Host "‚úÖ sed available"
        } catch {
          Write-Host "‚ö†Ô∏è sed not found in PATH (may be available in Git Bash)"
        }
        
        try {
          where.exe grep 2>$null
          Write-Host "‚úÖ grep available"
        } catch {
          Write-Host "‚ö†Ô∏è grep not found in PATH (may be available in Git Bash)"
        }
        
        Write-Host "Note: Text processing tools are typically available in Git Bash environment"
      shell: powershell

    - name: Check disk space for SVN migrations
      run: |
        Write-Host "Checking available disk space for SVN migrations..."
        $disk = Get-WmiObject -Class Win32_LogicalDisk | Where-Object { $_.DeviceID -eq "C:" }
        $freeSpaceGB = [math]::Round($disk.FreeSpace / 1GB, 2)
        Write-Host "‚úÖ Available disk space on C: drive: $freeSpaceGB GB"
        Write-Host "Recommendation: Ensure 3x SVN repository size is available"
      shell: powershell

    - name: Tool Verification Summary
      run: |
        Write-Host "=============================================="
        Write-Host "üéâ ALL SVN TO GITHUB MIGRATION TOOLS VALIDATED"
        Write-Host "=============================================="
        Write-Host "‚úÖ Git with SVN support (git-svn) installed"
        Write-Host "‚úÖ Subversion client (svn) installed"
        Write-Host "‚úÖ GitHub CLI installed and accessible"
        Write-Host "‚úÖ Perl interpreter available"
        Write-Host "‚úÖ Text processing tools available (in Git environment)"
        Write-Host "‚úÖ Sufficient disk space checked"
        Write-Host ""
        Write-Host "‚ÑπÔ∏è  Note: Some tools may require session restart for full PATH integration"
        Write-Host "‚ÑπÔ∏è  Note: Text processing tools are available in Git Bash environment"
        Write-Host "=============================================="
      shell: powershell
