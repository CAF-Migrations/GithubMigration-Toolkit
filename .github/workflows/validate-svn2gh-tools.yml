name: Validate SVN to GitHub Migration Tools

on:
  push:
    branches: [ main, develop ]
    paths:
      - '.github/prompts/svn2gh.prompt.md'
      - '.github/workflows/validate-svn2gh-tools.yml'
  pull_request:
    branches: [ main ]
    paths:
      - '.github/prompts/svn2gh.prompt.md'
      - '.github/workflows/validate-svn2gh-tools.yml'
  workflow_dispatch:

jobs:
  validate-tools:
    runs-on: windows-latest
    name: Validate SVN to GitHub Migration Tools Installation
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Chocolatey
      run: |
        Set-ExecutionPolicy Bypass -Scope Process -Force
        [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
        iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
      shell: powershell

    - name: Install Git for Windows (includes git-svn)
      run: |
        # Git is pre-installed on GitHub-hosted runners
        git --version
      shell: powershell

    - name: Install Subversion client
      run: |
        choco install svn -y
      shell: powershell

    - name: Install GitHub CLI
      run: |
        # GitHub CLI is pre-installed on GitHub-hosted runners
        gh --version
      shell: powershell

    - name: Install Strawberry Perl
      run: |
        choco install strawberryperl -y
      shell: powershell

    - name: Refresh PATH environment
      run: |
        $env:PATH = [System.Environment]::GetEnvironmentVariable("PATH","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("PATH","User")
      shell: powershell

    - name: Verify Git with SVN support
      run: |
        # Wait for installations to complete
        Start-Sleep -Seconds 10
        
        # Refresh PATH
        $env:PATH = [System.Environment]::GetEnvironmentVariable("PATH","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("PATH","User")
        
        git --version
        
        try {
          git svn --version
        } catch {
          # Git-SVN might need the full Git installation to be recognized
          $gitPath = (Get-Command git).Source
          $gitDir = Split-Path $gitPath
          & "$gitDir\git.exe" svn --version
        }
      shell: powershell

    - name: Verify Subversion client
      run: |
        # Refresh PATH to include TortoiseSVN bin directory
        $env:PATH = [System.Environment]::GetEnvironmentVariable("PATH","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("PATH","User")
        
        try {
          svn --version
        } catch {
          # TortoiseSVN bin directory might not be in PATH immediately
          $tortoisePath = "${env:ProgramFiles}\TortoiseSVN\bin"
          if (Test-Path "$tortoisePath\svn.exe") {
            & "$tortoisePath\svn.exe" --version
          } else {
            Get-ChildItem -Path "${env:ProgramFiles}" -Name "*Tortoise*" -Directory -ErrorAction SilentlyContinue
          }
        }
      shell: powershell

    - name: Verify GitHub CLI
      run: |
        gh --version
      shell: powershell

    - name: Verify Perl interpreter
      run: |
        # Refresh PATH
        $env:PATH = [System.Environment]::GetEnvironmentVariable("PATH","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("PATH","User")
        
        try {
          perl --version
        } catch {
          $perlPath = "${env:ProgramFiles}\Strawberry\perl\bin"
          if (Test-Path "$perlPath\perl.exe") {
            & "$perlPath\perl.exe" --version
          }
        }
      shell: powershell

    - name: Verify text processing tools
      run: |
        # Validation complete
        # Check if basic text tools are available (some come with Git for Windows)
        try {
          where.exe awk 2>$null
        } catch {
        }
        
        try {
          where.exe sed 2>$null
        } catch {
        }
        
        try {
          where.exe grep 2>$null
        } catch {
        }
        
      shell: powershell

    - name: Check disk space for SVN migrations
      run: |
        $disk = Get-WmiObject -Class Win32_LogicalDisk | Where-Object { $_.DeviceID -eq "C:" }
        $freeSpaceGB = [math]::Round($disk.FreeSpace / 1GB, 2)
      shell: powershell

    - name: Tool Verification Summary
      run: |
      shell: powershell

