name: Validate Azure DevOps Server to GitHub Migration Tools

on:
  push:
    branches: [ main, develop ]
    paths:
      - '.github/prompts/adoserver2gh.prompt.md'
      - '.github/workflows/validate-adoserver2gh-tools.yml'
  pull_request:
    branches: [ main ]
    paths:
      - '.github/prompts/adoserver2gh.prompt.md'
      - '.github/workflows/validate-adoserver2gh-tools.yml'
  workflow_dispatch:

jobs:
  validate-tools:
    runs-on: windows-latest
    name: Validate ADO Server to GitHub Migration Tools Installation
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install GitHub CLI
      run: |
        # GitHub CLI is pre-installed on GitHub-hosted runners
        gh --version
      shell: powershell

    - name: Install GitHub Enterprise Importer ADO2GH extension
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        gh extension install github/gh-ado2gh
      shell: powershell

    - name: Install Azure CLI
      run: |
        Invoke-WebRequest -Uri https://aka.ms/installazurecliwindows -OutFile .\AzureCLI.msi
        Start-Process msiexec.exe -Wait -ArgumentList '/I AzureCLI.msi /quiet'
      shell: powershell

    - name: Install Azure DevOps extension
      run: |
        az extension add --name azure-devops
      shell: powershell

    - name: Install Git CLI
      run: |
        # Git is pre-installed on GitHub-hosted runners
        git --version
      shell: powershell

    - name: Install Chocolatey (required for git-tfs)
      run: |
        Set-ExecutionPolicy Bypass -Scope Process -Force
        [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
        iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
      shell: powershell

    - name: Install Git-TFS (ESSENTIAL for TFVC with >90 days history)
      run: |
        # Install git-tfs without git dependencies since Git is pre-installed
        choco install gittfs --ignore-dependencies
        echo "C:/tools/gittfs" >> $GITHUB_PATH
      shell: bash

    - name: Verify GitHub CLI installation
      run: |
        gh --version
      shell: powershell

    - name: Verify GitHub Enterprise Importer ADO2GH extension
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        $extensions = gh extension list
        if ($extensions -match "ado2gh") {
        } else {
          throw "❌ GitHub Enterprise Importer ADO2GH extension not found"
        }
      shell: powershell

    - name: Verify Azure CLI installation
      run: |
        az --version
      shell: powershell

    - name: Verify Azure DevOps extension
      run: |
        $extensions = az extension list --output json | ConvertFrom-Json
        $devopsExt = $extensions | Where-Object { $_.name -eq "azure-devops" }
        if ($devopsExt) {
        } else {
          throw "❌ Azure DevOps extension not found"
        }
      shell: powershell

    - name: Verify Git CLI installation
      run: |
        git --version
      shell: powershell

    - name: Verify Git-TFS installation (CRITICAL for TFVC)
      run: |
        # GitHub Actions specific verification
        Write-Output "Checking git-tfs installation..."
        
        # Refresh PATH to include Chocolatey paths
        if (-not ($env:PATH -like "*chocolatey*")) {
          $env:PATH = "$env:PATH;C:\ProgramData\chocolatey\bin"
          echo "C:\ProgramData\chocolatey\bin" >> $env:GITHUB_PATH
        }
        
        # Check if git-tfs is in PATH
        $gitTfsPath = Get-Command "git-tfs" -ErrorAction SilentlyContinue
        if ($gitTfsPath) {
          Write-Output "SUCCESS: git-tfs found at: $($gitTfsPath.Source)"
        } else {
          Write-Output "WARNING: git-tfs not found in PATH, checking Chocolatey installation..."
          $chocoList = choco list --local-only gittfs
          Write-Output "Chocolatey output: $chocoList"
        }
        
        # Try to execute git-tfs with error handling
        try {
          $tfsVersion = git tfs --version 2>&1
          Write-Output "SUCCESS: git-tfs version check: $tfsVersion"
        } catch {
          Write-Output "INFO: git-tfs version command had issues, trying help command..."
          try {
            $tfsHelp = git tfs help 2>&1
            if ($tfsHelp -match "usage|commands|help") {
              Write-Output "SUCCESS: git-tfs help command working correctly"
            }
          } catch {
            Write-Output "ERROR: git-tfs commands not responding"
            throw "git-tfs installation verification failed"
          }
        }
      shell: powershell

    - name: Test Azure DevOps Server Connection Configuration
      run: |
        # Test that the configuration command exists (without actual connection)
        az devops configure --help
      shell: powershell

    - name: Verify PowerShell availability for Windows Server environments
      run: |
        $PSVersionTable.PSVersion
      shell: powershell

    - name: Tool Verification Summary
      run: |
      shell: powershell

