name: Validate Azure DevOps Server to GitHub Migration Tools

on:
  push:
    branches: [ main, develop ]
    paths:
      - '.github/prompts/adoserver2gh.prompt.md'
      - '.github/workflows/validate-adoserver2gh-tools.yml'
  pull_request:
    branches: [ main ]
    paths:
      - '.github/prompts/adoserver2gh.prompt.md'
      - '.github/workflows/validate-adoserver2gh-tools.yml'
  workflow_dispatch:

jobs:
  validate-tools:
    runs-on: windows-latest
    name: Validate ADO Server to GitHub Migration Tools Installation
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install GitHub CLI
      run: |
        # GitHub CLI is pre-installed on GitHub-hosted runners
        gh --version
        Write-Host "GitHub CLI is available"
      shell: powershell

    - name: Install GitHub Enterprise Importer ADO2GH extension
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        gh extension install github/gh-ado2gh
        Write-Host "GitHub Enterprise Importer ADO2GH extension installed"
      shell: powershell

    - name: Install Azure CLI
      run: |
        Invoke-WebRequest -Uri https://aka.ms/installazurecliwindows -OutFile .\AzureCLI.msi
        Start-Process msiexec.exe -Wait -ArgumentList '/I AzureCLI.msi /quiet'
        Write-Host "Azure CLI installed"
      shell: powershell

    - name: Install Azure DevOps extension
      run: |
        az extension add --name azure-devops
        Write-Host "Azure DevOps extension installed"
      shell: powershell

    - name: Install Git CLI
      run: |
        # Git is pre-installed on GitHub-hosted runners
        git --version
        Write-Host "Git CLI is available"
      shell: powershell

    - name: Verify GitHub CLI installation
      run: |
        gh --version
        Write-Host "‚úÖ GitHub CLI version verified"
      shell: powershell

    - name: Verify GitHub Enterprise Importer ADO2GH extension
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        $extensions = gh extension list
        if ($extensions -match "ado2gh") {
          Write-Host "‚úÖ GitHub Enterprise Importer ADO2GH extension verified"
        } else {
          throw "‚ùå GitHub Enterprise Importer ADO2GH extension not found"
        }
      shell: powershell

    - name: Verify Azure CLI installation
      run: |
        az --version
        Write-Host "‚úÖ Azure CLI version verified"
      shell: powershell

    - name: Verify Azure DevOps extension
      run: |
        $extensions = az extension list --output json | ConvertFrom-Json
        $devopsExt = $extensions | Where-Object { $_.name -eq "azure-devops" }
        if ($devopsExt) {
          Write-Host "‚úÖ Azure DevOps extension verified"
        } else {
          throw "‚ùå Azure DevOps extension not found"
        }
      shell: powershell

    - name: Verify Git CLI installation
      run: |
        git --version
        Write-Host "‚úÖ Git CLI version verified"
      shell: powershell

    - name: Test Azure DevOps Server Connection Configuration
      run: |
        Write-Host "Testing Azure DevOps Server connection configuration capability..."
        # Test that the configuration command exists (without actual connection)
        az devops configure --help
        Write-Host "‚úÖ Azure DevOps Server configuration capability verified"
      shell: powershell

    - name: Verify PowerShell availability for Windows Server environments
      run: |
        $PSVersionTable.PSVersion
        Write-Host "‚úÖ PowerShell version verified (recommended for Windows Server environments)"
      shell: powershell

    - name: Tool Verification Summary
      run: |
        Write-Host "=================================================================="
        Write-Host "üéâ ALL AZURE DEVOPS SERVER TO GITHUB MIGRATION TOOLS VALIDATED"
        Write-Host "=================================================================="
        Write-Host "‚úÖ GitHub CLI installed and accessible"
        Write-Host "‚úÖ GitHub Enterprise Importer extension installed"
        Write-Host "‚úÖ Azure CLI installed"
        Write-Host "‚úÖ Azure DevOps extension installed"
        Write-Host "‚úÖ Git CLI accessible"
        Write-Host "‚úÖ Azure DevOps Server configuration capability verified"
        Write-Host "‚úÖ PowerShell available (recommended for Windows Server environments)"
        Write-Host "=================================================================="
      shell: powershell
